services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 5s
      retries: 30

  createbuckets:
    image: minio/mc:RELEASE.2024-07-31T15-58-33Z-cpuv1
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -eu -c "
        echo 'Waiting for MinIO...';
        until mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; do
          echo '  MinIO not ready yet, retry in 2s'; sleep 2;
        done;
        if ! mc ls local/${MLFLOW_ARTIFACT_BUCKET} >/dev/null 2>&1; then
          mc mb -p local/${MLFLOW_ARTIFACT_BUCKET};
          echo 'Created bucket: '${MLFLOW_ARTIFACT_BUCKET};
        else
          echo 'Bucket already exists: '${MLFLOW_ARTIFACT_BUCKET};
        fi;
        echo 'Buckets ready';
      "
    restart: "no"

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      createbuckets:
        condition: service_completed_successfully
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ENDPOINT_URL_S3: http://minio:9000
      AWS_S3_FORCE_PATH_STYLE: "true"
      AWS_DEFAULT_REGION: "us-east-1"
      MLFLOW_S3_IGNORE_TLS: "true"           
      MLFLOW_ARTIFACT_BUCKET: ${MLFLOW_ARTIFACT_BUCKET}
    command: >
      mlflow server
      --backend-store-uri postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      --registry-store-uri postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      --artifacts-destination s3://${MLFLOW_ARTIFACT_BUCKET}
      --serve-artifacts
      --host 0.0.0.0
      --port 5000
    ports:
      - "${MLFLOW_PORT}:5000"

  trainer:
    build:
      context: .
    depends_on:
      mlflow:
        condition: service_started
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ENDPOINT_URL_S3: http://minio:9000
      AWS_S3_FORCE_PATH_STYLE: "true"
      AWS_DEFAULT_REGION: "us-east-1"
      MLFLOW_S3_IGNORE_TLS: "true"
      MLFLOW_ARTIFACT_BUCKET: ${MLFLOW_ARTIFACT_BUCKET}
      PYTHONPATH: /work
    working_dir: /work
    volumes:
      - ./:/work
    command: tail -f /dev/null

volumes:
  pgdata:
  minio_data:
